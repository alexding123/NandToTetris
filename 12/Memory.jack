// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array heap;
    static Array ram;
    static int heap, free_list;
    /** Initializes the class. */
    function void init() {
        let heap = 2048;
        let heap[0] = 0; // next
        let heap[1] = 14335; // length
        let ram = 0; // allow easy access
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array current, next, smallest;
        let current = heap;
        let smallest = current;
        while (~(current[0] = 0)) {
            if ((~(current[1]<(size+2))) & (current[1]<smallest[1])) {
                let smallest = current;
            }
            let current = current[0];
        }
        let smallest[1] = smallest[1]-size-2;
        let smallest[2+smallest[1]] = 0;
        let smallest[2+smallest[1]+1] = size;
        return smallest+2+smallest[1]+2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array current, next;
        let current = heap;
        while (~(current = 0)) {
            let current = current[0];
        }
        let current[0] = o-2;
        return;
    }    
}
