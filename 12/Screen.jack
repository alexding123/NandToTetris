// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int row_size, word_size;
    static Array screen;
    static boolean color;
    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let row_size = 32;
        let word_size = 16;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        while (i<8192) {
            let screen[i] = 0;
            let i = i+1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mask;
        let address = (row_size*y) + (x/word_size);
        let mask = Math.two_to_the(x & 15); // x mod 16 (00001111)
        if (color) {
            let screen[address] = screen[address] | mask; // e.g. 00010000 for 4th bit
        } else {
            let screen[address] = screen[address] & (~mask); // e.g. 11101111 for 4th bit
        }
        
        return;

    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int temp;
        var int a, b, diff;

        // reverse in case x1 > x2
        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = x2-x1;
        let dy = y2-y1;

        if (dx=0) { // vertical line
            do Screen.drawVerticalLine(y1, y2, x1);
            return;
        }

        if (dy=0) { // horizontal line
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }

        if (dy>0) { // southeast
            while ((~(a>dx)) & (~(b>dy))) {
                do Screen.drawPixel(x1+a,y1+b);
                if (diff<0) {
                    let a = a+1;
                    let diff = diff+dy;
                } else {
                    let b = b+1;
                    let diff = diff-dx;
                }
            } 
        } else { // northeast
            while ((~(a>dx)) & (~(b<dy))) {
                do Screen.drawPixel(x1+a,y1+b);
                if (diff<0) {
                    let a = a+1;
                    let diff = diff-dy;
                } else {
                    let b = b-1;
                    let diff = diff-dx;
                }
            }
        }
        
        return;
    }

    function void drawVerticalLine(int y1, int y2, int x) {
        var int y, temp;
        if (y1 > y2) { // switch the two to make sure y1<=y2
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        let y = y1;
        while (~(y>y2)) {
            do Screen.drawPixel(x, y);
            let y = y+1;
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int long_start, long_end;
        var int x1_mod, x2_mod;

        let x1_mod = x1 & 15;
        let x2_mod = x2 & 15;
        let long_start = (y*32) + (x1/16);
        let long_end = (y*32) + (x2/16);

        if (x2_mod = 0) {
            let long_end = long_end - 1;
        }

        if (long_start=long_end) {
            do Screen.drawShortHorizontalLine(x1, x2, y);
        } else {
            if (~(x1_mod=0)) {
                let long_start = long_start + 1;
                do Screen.drawShortHorizontalLine(x1, x1+16-x1_mod, y);
            }
            if (~(x2_mod=0)) {
                let long_end = long_end - 1;
                do Screen.drawShortHorizontalLine(x2-x2_mod, x2, y);
            }
            while (~(long_start > long_end)) {
                if (color) {
                    let screen[long_start] = -1;
                } else {
                    let screen[long_start] = 0;
                }
                let long_start = long_start + 1;
            }
        }

        return;
    }

    function void drawShortHorizontalLine(int x1, int x2, int y) {
        while (~(x1>x2)) {
            do Screen.drawPixel(x1,y);
            let x1 = x1+1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;
        
        while (~(y=y2)) {
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = y+1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        // buggy please fix
        var int current_r, x_diff, r_squared;
        do Screen.drawLine(x-r,y,x+r,y);
        let current_r = 1;
        let r_squared = r*r;
        while (~(current_r > r)) {
            let x_diff = Math.sqrt(r_squared-(current_r*current_r));
            do Screen.drawHorizontalLine(x-x_diff, x+x_diff, y+current_r);
            do Screen.drawShortHorizontalLine(x-x_diff, x+x_diff, y-current_r);
            let current_r = current_r+1;
        }
        return;
    }
}
