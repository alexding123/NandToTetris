// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length-1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i;
        var boolean is_neg;

        if ((length>0) & (str[0] = 45)) { // it's '-'
            let is_neg = true;
            let i = 1;
        } else {
            let is_neg = false;
            let i = 0;
        }

        while (i<length) {
            if ((str[i] < 58) & (str[i] > 47)) {
                let val = (val*10)+str[i]-48;
                let i = i+1;
            } else {
                if (is_neg) {
                    return -val;
                } else {
                    return val;
                }
            }

        }
        if (is_neg) {
            return -val;
        } else {
            return val;
        }

    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        do _setInt(val);
        return;
    }

    method void _setInt(int val) {
        var int last_digit, c;
        let last_digit = val - ((val/10)*10);
        let c = last_digit+48;
        let str[length] = c;
        let length = length+1;
        if (~(val < 10)) {
            do _setInt(val/10);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
