// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array two_to_the;
    /** Initializes the library. */
    function void init() {
        let two_to_the = Array.new(16);
        let two_to_the[0] = 1;
        let two_to_the[1] = 2;
        let two_to_the[2] = 4;
        let two_to_the[3] = 8;
        let two_to_the[4] = 16;
        let two_to_the[5] = 32;
        let two_to_the[6] = 64;
        let two_to_the[7] = 128;
        let two_to_the[8] = 256;
        let two_to_the[9] = 512;
        let two_to_the[10] = 1024;
        let two_to_the[11] = 2048;
        let two_to_the[12] = 4096;
        let two_to_the[13] = 8192;
        let two_to_the[14] = 16384;
        let two_to_the[15] = 16384+16384;
        
        return;
    }

    function int two_to_the(int x) {
        return two_to_the[x];
    }
    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shifted_x, i;
        
        let shifted_x = x; 

        while (i < 16) {
            if (~((y & two_to_the[i])=0)) { // if y's i'th bit is 1
                let sum = sum + shifted_x;
            }
            let shifted_x = shifted_x + shifted_x; // avoid recursion
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean x_pos, y_pos;
        var int q, result;

        let x_pos = x > 0;
        let y_pos = y > 0;
        let x = Math.abs(x);
        let y = Math.abs(y); 
        
        if (y>x) {
            return 0;
        }

        let q = Math.divide(x, y+y);
        if ((x-(2*q*y))<y) {
            let result = q+q;
        } else {
            let result = q+q+1;
        }

        if (x_pos=y_pos) {
            return result;
        } else {
            return -result;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i, y, y_plus, y_plus_squared;
        let i = 7; // 16/2 - 1
        while (~(i<0)) {
            let y_plus = y+two_to_the[i];
            let y_plus_squared = Math.multiply(y_plus, y_plus);
            if ((~(y_plus_squared > x)) & (y_plus_squared > 0)) {
                let y = y_plus;
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
